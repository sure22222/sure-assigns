








create database fsdatasks;
use fsdatasks;

--TASK 1


CREATE or replace table shopping_history(
product varchar not null,
quantity integer not null,
unit_price integer not null
);

insert into shopping_history values ('soap',5,5);
insert into shopping_history values ('detergent',3,7);
insert into shopping_history values ('milk',3,10);
insert into shopping_history values ('milk',3,10);
insert into shopping_history values ('bread',7,3);
insert into shopping_history values ('bread',5,2);
insert into shopping_history values ('butter',5,10);
insert into shopping_history values ('clothes',2,20);
insert into shopping_history values ('flour',10,10);
insert into shopping_history values ('jaggery',1,10);

select * from  shopping_history
;
select product,sum(quantity*unit_price) as total_price from shopping_history group by 1 order by 1;



--TASK 2
--1.Given

create or replace table phones(
name  varchar(20) not null unique,
phone_number integer not null unique

);


create table calls(
id integer not null,
caller integer not null,
callee integer not null,
duration integer not null,
unique(id)
);

insert into phones values ('jack',1234);
insert into phones values ('lena',3333);
insert into phones values ('mark',9999);
insert into phones values ('anna',7582);


select * from phones;


insert into calls values (25,1234,7582,8);
insert into calls values (7,9999,7582,1);
insert into calls values (18,9999,3333,4);
insert into calls values (2,7582,3333,3);
insert into calls values (3,3333,1234,1);
insert into calls values (21,3333,1234,1);


select * from calls ;


with dur1 as(
select phones.name,sum(duration) as tot_duration1 from calls
join phones
on calls.caller=phones.phone_number
group by 1 order by 1
)



, dur2 as(
select phones.name,sum(duration) as tot_duration2 from calls
join phones
on calls.callee=phones.phone_number
group by 1 order by 1)



select name from(select name ,sum(tot_duration1) as tot_duration 
from (select * from dur1
union all
select * from dur2)   group by 1) where tot_duration>=10;


--2.Given
create or replace table phones1(
name  varchar(20) not null unique,
phone_number integer not null unique

);


create or replace table calls1(
id integer not null,
caller integer not null,
callee integer not null,
duration integer not null,
unique(id)
);

insert into phones1 values ('john',6356);
insert into phones1 values ('Addison',4315);
insert into phones1 values ('Kate',8003);
insert into phones1 values ('Ginny',9831);


insert into calls1 values (65,8003,9831,7);
insert into calls1 values (100,9831,8003,3);
insert into calls1 values (145,4315,9831,18);



select * from phones1;
select * from calls1;


select name from phones1
join calls1
on phones1.phone_number=calls1.caller
order by 1;


--Task 3
--1
create or replace table transaction(
Amount integer not null,
Dates DATE not null);

insert into transaction values(1000,'2020-01-06' );
insert into transaction values(-10, '2020-01-14');
insert into transaction values(-75, '2020-01-20');
insert into transaction values(-5,'2020-01-25' );
insert into transaction values(-4,'2020-01-29' );
insert into transaction values(2000,'2020-03-10' );
insert into transaction values(-75,'2020-03-12' );
insert into transaction values(-20,'2020-03-15' );
insert into transaction values(40,'2020-03-15');
insert into transaction values(-50,'2020-03-17');
insert into transaction values(200,'2020-10-10');
insert into transaction values(-200,'2020-10-10');

select * from transaction;

 WITH a AS (select * , case when sum(credit_sum)<=-100 and tran_counts>=3 then '0' else 5 end  as charge from (select mo,sum(incoming_trans) as incoming_sum,sum(credit_card_trans) as credit_sum, sum(case 
when amount<0 then 1 else 0 end) as tran_counts 
from (select  
month(dates) as mo ,amount,
sum(case when amount<0 and  mo in (1,3,10) then amount 
end) as  credit_card_trans , 
sum(case when amount>0 and   mo in (1,3,10) then amount 
end) as incoming_trans 
from transaction group by 1,2 order by 1)where  mo in (1,3,10) group by 1 ) group by 1,2,3,4)

SELECT SUM(incoming_sum)  +  SUM(credit_sum)-sum(charge)-5*9 AS final_credit
FROM a;











--2.Given Table
create or replace table transactions2(
amount integer,
dates Date
)


insert into transactions2 values(1,'2020-06-29');
insert into transactions2 values(35,'2020-02-20');
insert into transactions2 values(-50,'2020-02-03');
insert into transactions2 values(-1,'2020-02-26');
insert into transactions2 values(-200,'2020-08-01');
insert into transactions2 values(-44,'2020-02-07');
insert into transactions2 values(-5,'2020-02-25');
insert into transactions2 values(1,'2020-06-29');
insert into transactions2 values(1,'2020-06-29');
insert into transactions2 values(-100,'2020-12-29');
insert into transactions2 values(-100,'2020-12-30');
insert into transactions2 values(-100,'2020-12-31');



select * from transactions2


WITH b AS (select * , case when sum(credit_sum)<=-100 and tran_counts>=3 then '0' else 5 end  as charge from (select mo,sum(incoming_trans) as incoming_sum,sum(credit_card_trans) as credit_sum, sum(case 
when amount<0 then 1 else 0 end) as tran_counts 
from (select  
month(dates) as mo ,amount,
case when amount<0 and  mo in (2,6,8,12) then amount 
end  as  credit_card_trans , 
case when amount>0 and   mo in (2,6,8,12) then amount 
end  as incoming_trans 
from transactions2  order by 1)where mo in (2,6,8,12) group by 1)group by 1,2,3,4)






SELECT SUM(incoming_sum)  +  SUM(credit_sum)-sum(charge)-5*8 AS final_credit
FROM b;


--3.
create or replace table transactions3(
amount integer,
dates Date
);

insert into transactions3 values(6000,'2020-04-03');
insert into transactions3 values(5000,'2020-04-02');
insert into transactions3 values(4000,'2020-04-01');
insert into transactions3 values(3000,'2020-03-01');
insert into transactions3 values(2000,'2020-02-01');
insert into transactions3 values(1000,'2020-01-01');


select * from transactions3



select  sum(amount)  -12*5 from transactions3